let onPin2 = false
let onPin1 = false
let onPin0 = false
let time = 0
pins.analogSetPitchPin(AnalogPin.P8)
input.onPinPressed(TouchPin.P0, () => {
    if (onPin0 == true) {
        onPin0 = false
    } else {
        onPin0 = true
    }
})
input.onPinPressed(TouchPin.P1, () => {
    if (onPin1 == true) {
        onPin1 = false
    } else {
        onPin1 = true
    }
})
basic.forever(() => {
    basic.pause(2000)
    if (onPin0 == false && onPin1 == false && onPin2 == false) {
        basic.showLeds(`
            . . . . .
            . . . . .
            . . . . .
            . . . . .
            . . . . .
            `)
    }
    if (onPin0 == false && onPin1 == false && onPin2 == true) {
        basic.showLeds(`
            # . . . .
            . . . . .
            . . . . .
            . . . . .
            . . . . .
            `)
        basic.pause(time)
        music.playTone(131, music.beat(BeatFraction.Whole))
        reset()
    }
    if (onPin0 == false && onPin1 == true && onPin2 == false) {
        basic.showLeds(`
            . # . . .
            # . . . .
            . . . . .
            . . . . .
            . . . . .
            `)
        basic.pause(time)
        music.playTone(147, music.beat(BeatFraction.Whole))
        reset()
    }
    if (onPin0 == false && onPin1 == true && onPin2 == true) {
        basic.showLeds(`
            . . # . .
            . # . . .
            # . . . .
            . . . . .
            . . . . .
            `)
        basic.pause(time)
        music.playTone(165, music.beat(BeatFraction.Whole))
        reset()
    }
    if (onPin0 == true && onPin1 == false && onPin2 == false) {
        basic.showLeds(`
            . . . # .
            . . # . .
            . # . . .
            # . . . .
            . . . . .
            `)
        basic.pause(time)
        reset()
        music.playTone(175, music.beat(BeatFraction.Whole))
    }
    if (onPin0 == true && onPin1 == false && onPin2 == true) {
        basic.showLeds(`
            . . . . #
            . . . # .
            . . # . .
            . # . . .
            # . . . .
            `)
        basic.pause(time)
        music.playTone(196, music.beat(BeatFraction.Whole))
        reset()
    }
    if (onPin0 == true && onPin1 == true && onPin2 == false) {
        basic.showLeds(`
            . . . . .
            . . . . .
            . . . . #
            . . . # #
            . . # # #
            `)
        basic.pause(time)
        reset()
        music.playTone(220, music.beat(BeatFraction.Whole))
    }
    if (onPin0 == true && onPin1 == true && onPin2 == true) {
        basic.showLeds(`
            . . . . .
            . . . . #
            . . . # #
            . . # # .
            . # # . .
            `)
        basic.pause(time)
        music.playTone(247, music.beat(BeatFraction.Whole))
        reset()
    }
})
input.onPinPressed(TouchPin.P2, () => {
    if (onPin2 == true) {
        onPin2 = false
    } else {
        onPin2 = true
    }
})
time = 1000
function reset() {
    onPin0 = false
    onPin1 = false
    onPin2 = false
}
